version: '3'

services:

  telegraf:
    # Telegraf Docker images: https://hub.docker.com/_/telegraf
    image: telegraf:1.28
    ports:
      # Because we are running Telegraf with the OpenTelegraf plugin, we need to expose the conventional OpenTelemetry
      # port which is 4317.
      - "4317:4317"
    volumes:
      - type: bind
        source: ./telegraf.toml
        target: /etc/telegraf/telegraf.conf
        read_only: true
    networks:
      - playground_network

  influxdb:
    # InfluxDB Docker images: https://hub.docker.com/_/influxdb
    # We are using the InfluxDB 1.x line because it is still the most relevant. InfluxDB 2.x went on to Flux which is
    # now deprecated.
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: playground
      INFLUXDB_HTTP_AUTH_ENABLED: false # Not sure if this is needed
    networks:
      - playground_network

networks:
  # While we could get away without explicitly defining a network, it gives us an opportunity to describe how we are
  # using Docker networking in our application + metric stack.
  #
  # The 'bridge' driver means that the containers will be able to communicate with each other, and are accessible from
  # the host machine. This is important, because the OpenTelemetry agent running in the Java program needs to export
  # metrics to the Telegraf agent running in the Telegraf container. And the Telegraf agent needs to export metrics to
  # the InfluxDB container, and so on.
  playground_network:
    driver: bridge
